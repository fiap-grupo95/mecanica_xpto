services:
  app:
    container_name: mecanica_xpto
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
  dev:
    image: golang:1.24
    working_dir: /app
    volumes:
      - .:/app
    tty: true
    command: tail -f /dev/null

  db:
    image: postgres:17.5
    container_name: db
    restart: always
    env_file:
      - .env
    ports:
      - '5432:5432'
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    #      - ./internal/infrastructure/database/script.sql:/docker-entrypoint-initdb.d/script.sql
    networks:
      - app_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  sonarqube:
    image: sonarqube:25.7.0.110598-community
    container_name: sonarqube
    restart: always
    ports:
      - '9000:9000'
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db_postgres_sonar:5433/${POSTGRES_SONAR_DB}
      SONAR_JDBC_USERNAME: ${POSTGRES_SONAR_USER}
      SONAR_JDBC_PASSWORD: ${POSTGRES_SONAR_PASSWORD}
    depends_on:
      - db_postgres_sonar
    networks:
      - sonar-net
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions

  db_postgres_sonar:
    image: postgres:17.5
    container_name: db_postgres_sonar
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_SONAR_USER}
      POSTGRES_PASSWORD: ${POSTGRES_SONAR_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SONAR_DB}
      POSTGRES_PORT: 5433
    command: -p 5433
    networks:
      - sonar-net
    ports:
      - '5433:5433'
    volumes:
      - postgresql_sonar_data:/var/lib/postgresql/data

networks:
  default:
    driver: bridge

  app_network:
    driver: bridge

  db_network:
    driver: bridge

  sonar-net: # Define the network explicitly
    name: sonar-net # Give it a specific name

volumes:
  db_data:
  app_data:
  sonar_data:
  sonar_extensions:
  postgresql_sonar_data:
  postgresql_data:
