// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/additional_repair/additional_repair_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "mecanica_xpto/internal/domain/model/dto"
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAdditionalRepairRepository is a mock of IAdditionalRepairRepository interface.
type MockIAdditionalRepairRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdditionalRepairRepositoryMockRecorder
}

// MockIAdditionalRepairRepositoryMockRecorder is the mock recorder for MockIAdditionalRepairRepository.
type MockIAdditionalRepairRepositoryMockRecorder struct {
	mock *MockIAdditionalRepairRepository
}

// NewMockIAdditionalRepairRepository creates a new mock instance.
func NewMockIAdditionalRepairRepository(ctrl *gomock.Controller) *MockIAdditionalRepairRepository {
	mock := &MockIAdditionalRepairRepository{ctrl: ctrl}
	mock.recorder = &MockIAdditionalRepairRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdditionalRepairRepository) EXPECT() *MockIAdditionalRepairRepositoryMockRecorder {
	return m.recorder
}

// AddPartSupplyAndService mocks base method.
func (m *MockIAdditionalRepairRepository) AddPartSupplyAndService(additionalRepair, updatedAdditionalRepair *dto.AdditionalRepairDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPartSupplyAndService", additionalRepair, updatedAdditionalRepair)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPartSupplyAndService indicates an expected call of AddPartSupplyAndService.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) AddPartSupplyAndService(additionalRepair, updatedAdditionalRepair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPartSupplyAndService", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).AddPartSupplyAndService), additionalRepair, updatedAdditionalRepair)
}

// Create mocks base method.
func (m *MockIAdditionalRepairRepository) Create(additionalRepair *dto.AdditionalRepairDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", additionalRepair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) Create(additionalRepair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).Create), additionalRepair)
}

// CustomerApprovalStatus mocks base method.
func (m *MockIAdditionalRepairRepository) CustomerApprovalStatus(id uint, status entities.AdditionalRepairStatusDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerApprovalStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerApprovalStatus indicates an expected call of CustomerApprovalStatus.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) CustomerApprovalStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerApprovalStatus", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).CustomerApprovalStatus), id, status)
}

// GetByID mocks base method.
func (m *MockIAdditionalRepairRepository) GetByID(id uint) (*dto.AdditionalRepairDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*dto.AdditionalRepairDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).GetByID), id)
}

// GetByServiceOrder mocks base method.
func (m *MockIAdditionalRepairRepository) GetByServiceOrder(serviceOrderId uint) ([]dto.AdditionalRepairDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByServiceOrder", serviceOrderId)
	ret0, _ := ret[0].([]dto.AdditionalRepairDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByServiceOrder indicates an expected call of GetByServiceOrder.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) GetByServiceOrder(serviceOrderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByServiceOrder", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).GetByServiceOrder), serviceOrderId)
}

// GetPartsSupplyAdditionalRepair mocks base method.
func (m *MockIAdditionalRepairRepository) GetPartsSupplyAdditionalRepair(partsSupplyID, additionalRepairID uint) (*dto.PartsSupplyAdditionalRepairDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartsSupplyAdditionalRepair", partsSupplyID, additionalRepairID)
	ret0, _ := ret[0].(*dto.PartsSupplyAdditionalRepairDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartsSupplyAdditionalRepair indicates an expected call of GetPartsSupplyAdditionalRepair.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) GetPartsSupplyAdditionalRepair(partsSupplyID, additionalRepairID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartsSupplyAdditionalRepair", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).GetPartsSupplyAdditionalRepair), partsSupplyID, additionalRepairID)
}

// GetStatus mocks base method.
func (m *MockIAdditionalRepairRepository) GetStatus(status string) (*dto.AdditionalRepairStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", status)
	ret0, _ := ret[0].(*dto.AdditionalRepairStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) GetStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).GetStatus), status)
}

// RemovePartSupplyAndService mocks base method.
func (m *MockIAdditionalRepairRepository) RemovePartSupplyAndService(additionalRepair, updatedAdditionalRepair *dto.AdditionalRepairDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePartSupplyAndService", additionalRepair, updatedAdditionalRepair)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePartSupplyAndService indicates an expected call of RemovePartSupplyAndService.
func (mr *MockIAdditionalRepairRepositoryMockRecorder) RemovePartSupplyAndService(additionalRepair, updatedAdditionalRepair interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartSupplyAndService", reflect.TypeOf((*MockIAdditionalRepairRepository)(nil).RemovePartSupplyAndService), additionalRepair, updatedAdditionalRepair)
}
