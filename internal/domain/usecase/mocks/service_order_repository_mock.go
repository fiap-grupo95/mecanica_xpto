// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/service_order/service_order_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "mecanica_xpto/internal/domain/model/dto"
	entities "mecanica_xpto/internal/domain/model/entities"
	valueobject "mecanica_xpto/internal/domain/model/valueobject"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIServiceOrderRepository is a mock of IServiceOrderRepository interface.
type MockIServiceOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceOrderRepositoryMockRecorder
}

// MockIServiceOrderRepositoryMockRecorder is the mock recorder for MockIServiceOrderRepository.
type MockIServiceOrderRepositoryMockRecorder struct {
	mock *MockIServiceOrderRepository
}

// NewMockIServiceOrderRepository creates a new mock instance.
func NewMockIServiceOrderRepository(ctrl *gomock.Controller) *MockIServiceOrderRepository {
	mock := &MockIServiceOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIServiceOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceOrderRepository) EXPECT() *MockIServiceOrderRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIServiceOrderRepository) Create(serviceOrder *entities.ServiceOrder) (*entities.ServiceOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", serviceOrder)
	ret0, _ := ret[0].(*entities.ServiceOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIServiceOrderRepositoryMockRecorder) Create(serviceOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIServiceOrderRepository)(nil).Create), serviceOrder)
}

// GetByID mocks base method.
func (m *MockIServiceOrderRepository) GetByID(id uint) (*dto.ServiceOrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*dto.ServiceOrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIServiceOrderRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIServiceOrderRepository)(nil).GetByID), id)
}

// GetPartsSupplyServiceOrder mocks base method.
func (m *MockIServiceOrderRepository) GetPartsSupplyServiceOrder(partsSupplyID, serviceOrderID uint) (*dto.PartsSupplyServiceOrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartsSupplyServiceOrder", partsSupplyID, serviceOrderID)
	ret0, _ := ret[0].(*dto.PartsSupplyServiceOrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartsSupplyServiceOrder indicates an expected call of GetPartsSupplyServiceOrder.
func (mr *MockIServiceOrderRepositoryMockRecorder) GetPartsSupplyServiceOrder(partsSupplyID, serviceOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartsSupplyServiceOrder", reflect.TypeOf((*MockIServiceOrderRepository)(nil).GetPartsSupplyServiceOrder), partsSupplyID, serviceOrderID)
}

// GetStatus mocks base method.
func (m *MockIServiceOrderRepository) GetStatus(status valueobject.ServiceOrderStatus) (*dto.ServiceOrderStatusDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", status)
	ret0, _ := ret[0].(*dto.ServiceOrderStatusDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockIServiceOrderRepositoryMockRecorder) GetStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockIServiceOrderRepository)(nil).GetStatus), status)
}

// List mocks base method.
func (m *MockIServiceOrderRepository) List() ([]dto.ServiceOrderDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]dto.ServiceOrderDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIServiceOrderRepositoryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIServiceOrderRepository)(nil).List))
}

// Update mocks base method.
func (m *MockIServiceOrderRepository) Update(serviceOrder *entities.ServiceOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", serviceOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIServiceOrderRepositoryMockRecorder) Update(serviceOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIServiceOrderRepository)(nil).Update), serviceOrder)
}

// UpdateEstimate mocks base method.
func (m *MockIServiceOrderRepository) UpdateEstimate(id uint, estimate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEstimate", id, estimate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEstimate indicates an expected call of UpdateEstimate.
func (mr *MockIServiceOrderRepositoryMockRecorder) UpdateEstimate(id, estimate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEstimate", reflect.TypeOf((*MockIServiceOrderRepository)(nil).UpdateEstimate), id, estimate)
}
