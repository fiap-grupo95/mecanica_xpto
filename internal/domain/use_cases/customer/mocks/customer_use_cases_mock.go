// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/use_cases/customer/customer_use_cases.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICustomerUseCase is a mock of ICustomerUseCase interface.
type MockICustomerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerUseCaseMockRecorder
}

// MockICustomerUseCaseMockRecorder is the mock recorder for MockICustomerUseCase.
type MockICustomerUseCaseMockRecorder struct {
	mock *MockICustomerUseCase
}

// NewMockICustomerUseCase creates a new mock instance.
func NewMockICustomerUseCase(ctrl *gomock.Controller) *MockICustomerUseCase {
	mock := &MockICustomerUseCase{ctrl: ctrl}
	mock.recorder = &MockICustomerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerUseCase) EXPECT() *MockICustomerUseCaseMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockICustomerUseCase) CreateCustomer(customer *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockICustomerUseCaseMockRecorder) CreateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockICustomerUseCase)(nil).CreateCustomer), customer)
}

// DeleteCustomer mocks base method.
func (m *MockICustomerUseCase) DeleteCustomer(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockICustomerUseCaseMockRecorder) DeleteCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockICustomerUseCase)(nil).DeleteCustomer), id)
}

// GetByDocument mocks base method.
func (m *MockICustomerUseCase) GetByDocument(CpfCnpj string) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDocument", CpfCnpj)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDocument indicates an expected call of GetByDocument.
func (mr *MockICustomerUseCaseMockRecorder) GetByDocument(CpfCnpj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDocument", reflect.TypeOf((*MockICustomerUseCase)(nil).GetByDocument), CpfCnpj)
}

// GetById mocks base method.
func (m *MockICustomerUseCase) GetById(id uint) (*entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICustomerUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICustomerUseCase)(nil).GetById), id)
}

// ListCustomer mocks base method.
func (m *MockICustomerUseCase) ListCustomer() ([]entities.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomer")
	ret0, _ := ret[0].([]entities.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomer indicates an expected call of ListCustomer.
func (mr *MockICustomerUseCaseMockRecorder) ListCustomer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomer", reflect.TypeOf((*MockICustomerUseCase)(nil).ListCustomer))
}

// UpdateCustomer mocks base method.
func (m *MockICustomerUseCase) UpdateCustomer(id uint, customer *entities.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", id, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockICustomerUseCaseMockRecorder) UpdateCustomer(id, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockICustomerUseCase)(nil).UpdateCustomer), id, customer)
}
