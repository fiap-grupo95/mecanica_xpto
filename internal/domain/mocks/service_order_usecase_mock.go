// Code generated by MockGen. DO NOT EDIT.
// Source: service_order_usecase.go
//
// Generated by this command:
//
//	mockgen -source=service_order_usecase.go -destination=../mocks/service_order_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIServiceOrderUseCase is a mock of IServiceOrderUseCase interface.
type MockIServiceOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceOrderUseCaseMockRecorder
	isgomock struct{}
}

// MockIServiceOrderUseCaseMockRecorder is the mock recorder for MockIServiceOrderUseCase.
type MockIServiceOrderUseCaseMockRecorder struct {
	mock *MockIServiceOrderUseCase
}

// NewMockIServiceOrderUseCase creates a new mock instance.
func NewMockIServiceOrderUseCase(ctrl *gomock.Controller) *MockIServiceOrderUseCase {
	mock := &MockIServiceOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockIServiceOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceOrderUseCase) EXPECT() *MockIServiceOrderUseCaseMockRecorder {
	return m.recorder
}

// CreateServiceOrder mocks base method.
func (m *MockIServiceOrderUseCase) CreateServiceOrder(ctx context.Context, serviceOrder entities.ServiceOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceOrder", ctx, serviceOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceOrder indicates an expected call of CreateServiceOrder.
func (mr *MockIServiceOrderUseCaseMockRecorder) CreateServiceOrder(ctx, serviceOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceOrder", reflect.TypeOf((*MockIServiceOrderUseCase)(nil).CreateServiceOrder), ctx, serviceOrder)
}

// GetServiceOrder mocks base method.
func (m *MockIServiceOrderUseCase) GetServiceOrder(ctx context.Context, serviceOrder entities.ServiceOrder) (*entities.ServiceOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceOrder", ctx, serviceOrder)
	ret0, _ := ret[0].(*entities.ServiceOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceOrder indicates an expected call of GetServiceOrder.
func (mr *MockIServiceOrderUseCaseMockRecorder) GetServiceOrder(ctx, serviceOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceOrder", reflect.TypeOf((*MockIServiceOrderUseCase)(nil).GetServiceOrder), ctx, serviceOrder)
}

// ListServiceOrders mocks base method.
func (m *MockIServiceOrderUseCase) ListServiceOrders(ctx context.Context) ([]*entities.ServiceOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceOrders", ctx)
	ret0, _ := ret[0].([]*entities.ServiceOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceOrders indicates an expected call of ListServiceOrders.
func (mr *MockIServiceOrderUseCaseMockRecorder) ListServiceOrders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceOrders", reflect.TypeOf((*MockIServiceOrderUseCase)(nil).ListServiceOrders), ctx)
}

// UpdateServiceOrder mocks base method.
func (m *MockIServiceOrderUseCase) UpdateServiceOrder(ctx context.Context, serviceOrder entities.ServiceOrder, flow string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceOrder", ctx, serviceOrder, flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceOrder indicates an expected call of UpdateServiceOrder.
func (mr *MockIServiceOrderUseCaseMockRecorder) UpdateServiceOrder(ctx, serviceOrder, flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceOrder", reflect.TypeOf((*MockIServiceOrderUseCase)(nil).UpdateServiceOrder), ctx, serviceOrder, flow)
}
