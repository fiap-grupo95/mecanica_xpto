// Code generated by MockGen. DO NOT EDIT.
// Source: payment_repository.go
//
// Generated by this command:
//
//	mockgen -source=payment_repository.go -destination=../../mocks/payment_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "mecanica_xpto/internal/domain/model/dto"
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPaymentRepo is a mock of IPaymentRepo interface.
type MockIPaymentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPaymentRepoMockRecorder
	isgomock struct{}
}

// MockIPaymentRepoMockRecorder is the mock recorder for MockIPaymentRepo.
type MockIPaymentRepoMockRecorder struct {
	mock *MockIPaymentRepo
}

// NewMockIPaymentRepo creates a new mock instance.
func NewMockIPaymentRepo(ctrl *gomock.Controller) *MockIPaymentRepo {
	mock := &MockIPaymentRepo{ctrl: ctrl}
	mock.recorder = &MockIPaymentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPaymentRepo) EXPECT() *MockIPaymentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPaymentRepo) Create(ctx context.Context, so *entities.Payment) (*dto.PaymentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, so)
	ret0, _ := ret[0].(*dto.PaymentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPaymentRepoMockRecorder) Create(ctx, so any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPaymentRepo)(nil).Create), ctx, so)
}

// GetByID mocks base method.
func (m *MockIPaymentRepo) GetByID(ctx context.Context, id uint) (*dto.PaymentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*dto.PaymentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPaymentRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPaymentRepo)(nil).GetByID), ctx, id)
}

// GetByServiceOrderID mocks base method.
func (m *MockIPaymentRepo) GetByServiceOrderID(ctx context.Context, serviceOrderID uint) (*dto.PaymentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByServiceOrderID", ctx, serviceOrderID)
	ret0, _ := ret[0].(*dto.PaymentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByServiceOrderID indicates an expected call of GetByServiceOrderID.
func (mr *MockIPaymentRepoMockRecorder) GetByServiceOrderID(ctx, serviceOrderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByServiceOrderID", reflect.TypeOf((*MockIPaymentRepo)(nil).GetByServiceOrderID), ctx, serviceOrderID)
}

// List mocks base method.
func (m *MockIPaymentRepo) List(ctx context.Context) ([]dto.PaymentDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]dto.PaymentDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPaymentRepoMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPaymentRepo)(nil).List), ctx)
}
