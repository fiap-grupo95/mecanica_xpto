// Code generated by MockGen. DO NOT EDIT.
// Source: parts_supply_repository.go
//
// Generated by this command:
//
//	mockgen -source=parts_supply_repository.go -destination=../../mocks/parts_supply_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPartsSupplyRepo is a mock of IPartsSupplyRepo interface.
type MockIPartsSupplyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIPartsSupplyRepoMockRecorder
	isgomock struct{}
}

// MockIPartsSupplyRepoMockRecorder is the mock recorder for MockIPartsSupplyRepo.
type MockIPartsSupplyRepoMockRecorder struct {
	mock *MockIPartsSupplyRepo
}

// NewMockIPartsSupplyRepo creates a new mock instance.
func NewMockIPartsSupplyRepo(ctrl *gomock.Controller) *MockIPartsSupplyRepo {
	mock := &MockIPartsSupplyRepo{ctrl: ctrl}
	mock.recorder = &MockIPartsSupplyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPartsSupplyRepo) EXPECT() *MockIPartsSupplyRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPartsSupplyRepo) Create(ctx context.Context, ps *entities.PartsSupply) (entities.PartsSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ps)
	ret0, _ := ret[0].(entities.PartsSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPartsSupplyRepoMockRecorder) Create(ctx, ps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).Create), ctx, ps)
}

// Delete mocks base method.
func (m *MockIPartsSupplyRepo) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIPartsSupplyRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIPartsSupplyRepo) GetByID(ctx context.Context, id uint) (entities.PartsSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entities.PartsSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIPartsSupplyRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockIPartsSupplyRepo) GetByName(ctx context.Context, name string) (entities.PartsSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(entities.PartsSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIPartsSupplyRepoMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockIPartsSupplyRepo) List(ctx context.Context) ([]entities.PartsSupply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]entities.PartsSupply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPartsSupplyRepoMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockIPartsSupplyRepo) Update(ctx context.Context, ps *entities.PartsSupply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPartsSupplyRepoMockRecorder) Update(ctx, ps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPartsSupplyRepo)(nil).Update), ctx, ps)
}
