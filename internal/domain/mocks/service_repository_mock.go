// Code generated by MockGen. DO NOT EDIT.
// Source: service_repository.go
//
// Generated by this command:
//
//	mockgen -source=service_repository.go -destination=../../mocks/service_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "mecanica_xpto/internal/domain/model/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIServiceRepo is a mock of IServiceRepo interface.
type MockIServiceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceRepoMockRecorder
	isgomock struct{}
}

// MockIServiceRepoMockRecorder is the mock recorder for MockIServiceRepo.
type MockIServiceRepoMockRecorder struct {
	mock *MockIServiceRepo
}

// NewMockIServiceRepo creates a new mock instance.
func NewMockIServiceRepo(ctrl *gomock.Controller) *MockIServiceRepo {
	mock := &MockIServiceRepo{ctrl: ctrl}
	mock.recorder = &MockIServiceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceRepo) EXPECT() *MockIServiceRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIServiceRepo) Create(ctx context.Context, so *entities.Service) (entities.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, so)
	ret0, _ := ret[0].(entities.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIServiceRepoMockRecorder) Create(ctx, so any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIServiceRepo)(nil).Create), ctx, so)
}

// Delete mocks base method.
func (m *MockIServiceRepo) Delete(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIServiceRepoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIServiceRepo)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIServiceRepo) GetByID(ctx context.Context, id uint) (entities.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entities.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIServiceRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIServiceRepo)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockIServiceRepo) GetByName(ctx context.Context, name string) (entities.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(entities.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIServiceRepoMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIServiceRepo)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockIServiceRepo) List(ctx context.Context) ([]entities.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]entities.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIServiceRepoMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIServiceRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockIServiceRepo) Update(ctx context.Context, so *entities.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, so)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIServiceRepoMockRecorder) Update(ctx, so any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIServiceRepo)(nil).Update), ctx, so)
}
